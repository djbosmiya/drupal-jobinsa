{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}

 {% if (paragraph.field_title.value is not empty) or (paragraph.field_description.value is not empty) or (content.field_logo_section.value is not empty) %}
    <div class="container support-moyens-inner">
        <div class="row support-moyens-block">
            {% if (paragraph.field_title.value is not empty) or (paragraph.field_description.value is not empty) %}
              <div class="support-moyens-desc-wrap col-lg-6 col-md-12">
                {% if (paragraph.field_title.value is not empty) %}
                    <h2>{{ paragraph.field_title.value }}</h2>
                {% endif %}
                {% if paragraph.field_description.value is not empty %}
                  <div class="support-moyens-desc">{{ paragraph.field_description.value|raw }}</div>
                {% endif %}
              </div>
            {% endif %}
            <div class="support-moyens-logo-wrap col-lg-6 col-md-12 row">
              {% for key, item in content.field_logo_section if key|first != '#' %}
                  {% if (item['#paragraph'].field_link.0.url is not empty ) or (item['#paragraph'].field_image.value is not empty) %}
                  <div class="support-moyens-logo-item col-md-6 col-6">
                     <a class="support-logo-item" href="{{ item['#paragraph'].field_link.0.url }}"> <img src="{{ file_url(item['#paragraph'].field_image[0].entity.field_media_image.entity.fileuri|image_style('support_logo_230px'))}}"> </a>
                  </div>
                 {% endif %}
             {% endfor %}
            </div>
        </div>
    </div>
 {% endif %}